# This is just an example workflow for continuous deployment.
# You should customize it to meet your own requirements.
trigger:
# When new commits are pushed onto the main branch.
- main 

pool:
  vmImage: ubuntu-latest

steps:
# Setup environment.
- task: NodeTool@0
  inputs:
    versionSpec: '14.17.0'
    checkLatest: true

- task: Bash@3
  env:
    TEAMSFX_ENV_NAME: dev
  inputs:
    targetType: 'inline'
    script: |
      set -evuxo pipefail
      
      # Install the local dev dependency of @microsoft/teamsfx-cli. 
      # 'npm ci' is used here to install dependencies and it depends on package-lock.json.
      # If you prefer to use 'npm ci', please make sure to commit package-lock.json first, or just change it to 'npm install'.
      npm ci

      # Build the project.
      # The way to build the current project depends on how you scaffold it.
      # Different folder structures require different commands set.
      # 'npm ci' may be used here to install dependencies and it depends on package-lock.json.
      # If you prefer to use 'npm ci', please make sure to commit package-lock.json first, or just change it to 'npm install'.  
      cd tabs; npm ci; npm run build; cd -;cd api; npm ci; npm run build; cd -;

      # Run unit test.
      # Currently, no opinioned solution for unit test provided during scaffolding, so,
      # set up any unit test framework you prefer (for example, mocha or jest) and update the commands accordingly in below.
      # npm run test

      # Login Azure by service principal
      npx teamsfx account login azure --service-principal --username $(AZURE_SERVICE_PRINCIPAL_NAME) --password $(AZURE_SERVICE_PRINCIPAL_PASSWORD) --tenant $(AZURE_TENANT_ID)

      # Deploy to hosting environment.
      npx teamsfx deploy --env ${TEAMSFX_ENV_NAME}